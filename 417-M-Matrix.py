from typing import List
import collections
import math
import functools
import heapq

def pacificAtlantic(heights: List[List[int]]) -> List[List[int]]:
    M, N = len(heights), len(heights[0])
    moves = [(0, 1), (0, -1), (-1, 0), (1, 0)]
    pacific = [[True if c == 0 or r == 0 else False for c in range(N)] for r in range(M)]
    atlantic = [[True if c == N - 1 or r == M - 1 else False for c in range(N)] for r in range(M)]

    def dfs(row, col, visited, ocean):
        # if row == M - 1 and col == 0: return 3
        # if row == 0 and col == N - 1: return 3
        if (row, col) in visited: return
        visited.add((row, col))
        ocean[row][col] = True
        for moveR, moveC in moves:
            a = moveR + row
            b = moveC + col
            if 0 <= a < M and 0 <= b < N and heights[a][b] >= heights[row][col]:
                dfs(a, b, visited, ocean)

    for i in range(M):
        dfs(i, 0, set(), pacific)
        dfs(i, N - 1, set(), atlantic)
    for i in range(N):
        dfs(0, i, set(), pacific)
        dfs(M - 1, i, set(), atlantic)

    ret = []
    for i in range(M):
        for j in range(N):
            if pacific[i][j] and atlantic[i][j]:
                ret.append([i, j])
            
    return ret

print(pacificAtlantic([[1,2,3,4,5,6,7,8,9,10,11,12],[44,45,46,47,48,49,50,51,52,53,54,13],[43,80,81,82,83,84,85,86,87,88,55,14],[42,79,108,109,110,111,112,113,114,89,56,15],[41,78,107,128,129,130,131,132,115,90,57,16],[40,77,106,127,140,141,142,133,116,91,58,17],[39,76,105,126,139,144,143,134,117,92,59,18],[38,75,104,125,138,137,136,135,118,93,60,19],[37,74,103,124,123,122,121,120,119,94,61,20],[36,73,102,101,100,99,98,97,96,95,62,21],[35,72,71,70,69,68,67,66,65,64,63,22],[34,33,32,31,30,29,28,27,26,25,24,23]]))
print(pacificAtlantic(
    [[7,1,17,13,9,10,5,14,0,3],
    [7,15,7,8,15,16,10,10,5,13],
    [18,9,15,8,19,16,7,5,5,10],
    [15,11,18,3,1,17,6,4,10,19],
    [3,16,19,12,12,19,2,14,5,9],
    [7,16,0,13,14,7,2,8,6,19],
    [5,10,1,10,2,12,19,1,0,19],
    [13,18,19,12,17,17,4,5,8,2],
    [2,1,17,13,14,12,14,2,16,10],
    [5,8,1,11,16,1,18,15,6,19],
    [3,8,14,14,5,0,2,7,5,1],
    [17,1,9,17,10,10,10,7,1,16],
    [14,18,5,11,17,15,8,8,14,13],[6,4,10,17,8,0,11,4,2,8],[16,11,17,9,3,2,11,0,6,5],[12,18,18,11,1,7,12,16,12,12],[2,14,12,0,2,8,5,10,7,0],[16,13,1,19,8,13,11,8,11,3],[11,2,8,19,6,14,14,6,16,12],[18,0,18,10,16,15,15,12,4,3],[8,15,9,13,8,2,6,11,17,6],[7,3,0,18,7,12,2,3,12,10],[7,9,13,0,11,16,9,9,12,13],[9,4,19,6,8,10,12,6,7,11],[5,9,18,0,4,9,6,4,0,1],[9,12,1,11,13,13,0,16,0,6],[7,15,4,8,15,17,17,19,15,1],[7,17,4,1,1,14,10,19,10,19],[10,5,12,5,8,8,14,14,6,0],[16,10,10,7,13,4,0,15,18,0],[11,2,10,6,5,13,4,5,3,1],[9,14,16,14,15,3,2,13,17,8],[19,2,10,1,2,15,12,10,2,5],[12,4,8,9,8,6,4,14,14,0],[11,17,17,4,16,13,6,15,5,7],[12,18,1,3,9,10,7,1,1,1],[18,6,10,8,12,14,9,12,10,3],[15,13,18,13,8,5,12,14,18,0],[15,4,8,9,19,18,6,19,12,0],[4,14,15,4,17,17,9,17,9,0],[6,17,16,10,3,8,8,18,15,9],[3,8,4,2,13,0,2,8,8,2],[14,12,13,12,17,4,16,9,8,7],[0,19,8,16,1,13,7,6,15,11],[1,13,16,14,10,4,11,19,9,13],[8,0,2,1,16,12,16,9,9,9],[5,2,10,4,8,12,17,0,2,15],[11,2,15,15,14,9,11,19,18,11],[4,4,1,5,13,19,9,17,17,17],[4,1,8,0,8,19,11,0,5,4],[8,16,14,18,12,2,0,19,0,13],[7,11,3,18,8,2,2,19,8,7],[3,13,6,1,12,16,4,13,0,5],[12,1,16,19,2,12,16,15,19,6],[1,7,12,15,3,3,13,17,16,12]]))
print(pacificAtlantic([[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]))
print(pacificAtlantic([[2,1],[1,2]]))
print(pacificAtlantic([[1,1],[1,1],[1,1]]))